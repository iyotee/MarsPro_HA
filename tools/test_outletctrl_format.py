#!/usr/bin/env python3
"""
Test du format outletCtrl avec r√©cup√©ration automatique des vrais PIDs
Format simple et fonctionnel pour MarsPro
"""

import asyncio
import aiohttp
import json
import time
import random

class MarsPro_OutletCtrl_Tester:
    def __init__(self, email, password):
        self.email = email
        self.password = password
        self.token = None
        self.user_id = None
        self.base_url = "https://mars-pro.api.lgledsolutions.com"
        
    async def login(self):
        """Login avec format exact captur√©"""
        systemdata = {
            "reqId": str(random.randint(10000000000, 99999999999)),
            "appVersion": "1.3.2",
            "osType": "android", 
            "osVersion": "15",
            "deviceType": "SM-S928B",
            "deviceId": "AP3A.240905.015.A2",
            "netType": "wifi",
            "wifiName": "unknown",
            "timestamp": str(int(time.time())),
            "timezone": "34",
            "language": "French"
        }
        
        headers = {
            'Content-Type': 'application/json',
            'User-Agent': 'Dart/3.4 (dart:io)',
            'systemdata': json.dumps(systemdata)
        }
        
        payload = {
            "email": self.email,
            "password": self.password,
            "loginMethod": "1"
        }
        
        async with aiohttp.ClientSession() as session:
            url = f"{self.base_url}/api/android/ulogin/mailLogin/v1"
            async with session.post(url, json=payload, headers=headers) as response:
                if response.status == 200:
                    data = await response.json()
                    if data.get('code') == '000':
                        self.token = data['data']['token']
                        self.user_id = data['data']['userId']
                        print(f"‚úÖ Login r√©ussi ! Token: {self.token[:20]}...")
                        return True
                    else:
                        print(f"‚ùå Login √©chou√©: {data}")
                        return False
                else:
                    print(f"‚ùå HTTP Error: {response.status}")
                    return False
    
    async def get_real_devices(self):
        """R√©cup√©rer les vrais appareils du compte utilisateur"""
        systemdata = {
            "reqId": str(random.randint(10000000000, 99999999999)),
            "appVersion": "1.3.2",
            "osType": "android",
            "osVersion": "15", 
            "deviceType": "SM-S928B",
            "deviceId": "AP3A.240905.015.A2",
            "netType": "wifi",
            "wifiName": "unknown",
            "timestamp": str(int(time.time())),
            "timezone": "34",
            "language": "French",
            "token": self.token
        }
        
        headers = {
            'Content-Type': 'application/json',
            'User-Agent': 'Dart/3.4 (dart:io)',
            'systemdata': json.dumps(systemdata)
        }
        
        payload = {
            "pageNum": 1,
            "pageSize": 50
        }
        
        print(f"\nüì± R√©cup√©ration des appareils r√©els...")
        
        async with aiohttp.ClientSession() as session:
            url = f"{self.base_url}/api/android/udm/getDeviceList/v1"
            async with session.post(url, json=payload, headers=headers) as response:
                status = response.status
                
                try:
                    data = await response.json()
                except:
                    data = await response.text()
                
                if status == 200 and isinstance(data, dict):
                    if data.get('code') == '000':
                        devices = data.get('data', {}).get('list', [])
                        print(f"‚úÖ Trouv√© {len(devices)} appareils r√©els")
                        
                        # Afficher les appareils disponibles
                        for i, device in enumerate(devices):
                            name = device.get('deviceName', 'N/A')
                            pid = device.get('deviceSerialnum', 'N/A')
                            status_text = 'ON' if not device.get('isClose', False) else 'OFF'
                            device_type = device.get('productType', 'N/A')
                            print(f"   {i+1}. {name} (PID: {pid}) - {status_text} - Type: {device_type}")
                        
                        return devices
                    else:
                        print(f"‚ùå Erreur API: Code {data.get('code')} - {data.get('msg')}")
                        return []
                else:
                    print(f"‚ùå HTTP Error: {status}")
                    return []
    
    async def test_outletctrl_control(self, device_serial, pwm_value=57):
        """Test du format outletCtrl EXACT avec PID r√©el"""
        
        print(f"\nüéØ TEST FORMAT OUTLETCTRL AVEC PID R√âEL")
        print(f"Device PID: {device_serial}")
        print(f"PWM Value: {pwm_value}")
        
        # Format EXACT de la capture 3 !
        inner_data = {
            "method": "outletCtrl",  # Exactement comme dans capture 3
            "params": {
                "pid": device_serial,   # PID r√©el de l'utilisateur
                "num": 0,               # num: 0 exact de la capture
                "on": 1,                # on: 1 exact de la capture
                "pwm": pwm_value        # pwm: valeur variable
            }
        }
        
        # Le payload final doit √™tre exactement comme dans la capture 3
        payload = {"data": json.dumps(inner_data)}
        
        print(f"\nüì§ Payload envoy√© (format outletCtrl avec PID r√©el):")
        print(json.dumps(payload, indent=2, ensure_ascii=False))
        
        # Headers avec token
        systemdata = {
            "reqId": str(random.randint(10000000000, 99999999999)),
            "appVersion": "1.3.2",
            "osType": "android",
            "osVersion": "15",
            "deviceType": "SM-S928B", 
            "deviceId": "AP3A.240905.015.A2",
            "netType": "wifi",
            "wifiName": "unknown",
            "timestamp": str(int(time.time())),
            "timezone": "34",
            "language": "French",
            "token": self.token
        }
        
        headers = {
            'Content-Type': 'application/json',
            'User-Agent': 'Dart/3.4 (dart:io)',
            'systemdata': json.dumps(systemdata)
        }
        
        # Endpoint EXACT captur√©
        async with aiohttp.ClientSession() as session:
            url = f"{self.base_url}/api/upData/device"
            async with session.post(url, json=payload, headers=headers) as response:
                status = response.status
                
                try:
                    response_data = await response.json()
                except:
                    response_data = await response.text()
                
                print(f"\nüì• R√©ponse re√ßue:")
                print(f"Status: {status}")
                print(f"Data: {response_data}")
                
                if status == 200 and isinstance(response_data, dict) and response_data.get('code') == '000':
                    print(f"‚úÖ CONTR√îLE R√âUSSI avec PID r√©el !")
                    return True
                else:
                    print(f"‚ùå Contr√¥le √©chou√©")
                    return False

    async def test_different_pwm_values(self, device_serial):
        """Test avec diff√©rentes valeurs PWM sur appareil r√©el"""
        
        print(f"\nüéõÔ∏è  TEST DIFF√âRENTES VALEURS PWM SUR APPAREIL R√âEL")
        
        # Valeurs PWM √† tester
        pwm_values = [10, 30, 57, 80, 100]
        
        for pwm in pwm_values:
            print(f"\n--- Test PWM {pwm} sur {device_serial} ---")
            success = await self.test_outletctrl_control(device_serial, pwm)
            if success:
                print(f"‚úÖ PWM {pwm} appliqu√©e avec succ√®s sur appareil r√©el !")
                await asyncio.sleep(3)  # Pause plus longue pour voir l'effet
            else:
                print(f"‚ùå √âchec PWM {pwm}")
                break

async def main():
    """Test principal avec PIDs r√©els d'appareils"""
    print("üöÄ TEST FORMAT OUTLETCTRL AVEC VRAIS PIDS MARSPRO")
    print("=" * 60)
    
    email = input("üìß Email MarsPro: ").strip()
    password = input("üîë Mot de passe MarsPro: ").strip()
    
    if not email or not password:
        print("‚ùå Email et mot de passe requis")
        return
    
    tester = MarsPro_OutletCtrl_Tester(email, password)
    
    try:
        # 1. Login
        print(f"\nüîê Connexion...")
        if not await tester.login():
            print("‚ùå √âchec de la connexion")
            return
        
        # 2. R√©cup√©rer les vrais appareils
        devices = await tester.get_real_devices()
        
        if not devices:
            print("‚ùå Aucun appareil trouv√© sur votre compte")
            return
        
        # 3. S√©lectionner un appareil √† tester
        if len(devices) == 1:
            selected_device = devices[0]
            print(f"\nüéØ Test automatique avec le seul appareil disponible")
        else:
            print(f"\nüî¢ Choisissez un appareil √† tester:")
            for i, device in enumerate(devices):
                name = device.get('deviceName', 'N/A')
                pid = device.get('deviceSerialnum', 'N/A')
                print(f"   {i+1}. {name} (PID: {pid})")
            
            try:
                choice = int(input("Num√©ro de l'appareil (1-{}): ".format(len(devices))).strip()) - 1
                if 0 <= choice < len(devices):
                    selected_device = devices[choice]
                else:
                    print("‚ùå Choix invalide")
                    return
            except ValueError:
                print("‚ùå Veuillez entrer un num√©ro valide")
                return
        
        device_name = selected_device.get('deviceName', 'Appareil')
        device_pid = selected_device.get('deviceSerialnum')
        
        if not device_pid:
            print("‚ùå PID de l'appareil non trouv√©")
            return
        
        print(f"\nüéõÔ∏è  Test de contr√¥le avec {device_name} (PID: {device_pid})...")
        
        # 4. Test de contr√¥le avec le PID r√©el
        success = await tester.test_outletctrl_control(device_pid, 57)
        
        if success:
            print(f"\nüéâ Format outletCtrl fonctionne avec votre appareil r√©el !")
            
            # Demander si on continue les tests
            continue_tests = input("\nüîÑ Voulez-vous tester diff√©rentes valeurs PWM ? (y/N): ").strip().lower()
            if continue_tests in ['y', 'yes', 'oui', 'o']:
                await tester.test_different_pwm_values(device_pid)
            
            print(f"\nüéâ Tests termin√©s avec succ√®s !")
        else:
            print(f"\n‚ùå Le contr√¥le a √©chou√© avec votre appareil")
            print(f"üí° V√©rifiez que l'appareil est en mode Bluetooth (pas WiFi)")
    
    except Exception as e:
        print(f"\n‚ùå Erreur: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main()) 