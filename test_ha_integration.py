#!/usr/bin/env python3
"""
üè† TEST INT√âGRATION HOME ASSISTANT MISE √Ä JOUR
Test de l'int√©gration avec support Bluetooth BLE et WiFi hybride
"""

import asyncio
import sys
import os

sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'custom_components', 'marshydro'))

from api_marspro import MarsProAPI

async def test_ha_integration():
    """Test de l'int√©gration HA mise √† jour"""
    print("üè† TEST INT√âGRATION HOME ASSISTANT")
    print("=" * 50)
    print("üîß Version 2.3.0 avec support Bluetooth BLE + WiFi")
    print()
    
    email = "jeremy.noverraz2@proton.me"
    password = "T00rT00r"
    
    try:
        # Initialiser l'API
        api = MarsProAPI(email, password)
        await api.login()
        print("‚úÖ Connexion API r√©ussie")
        
        # D√©tecter le mode de l'appareil
        print("\nüîç D√âTECTION MODE APPAREIL")
        print("-" * 30)
        
        mode_detected = await api.detect_device_mode()
        
        if mode_detected:
            if api.is_bluetooth_device:
                print("üîµ ‚úÖ Mode Bluetooth d√©tect√©")
                if api.bluetooth_support:
                    print("üì± ‚úÖ Support Bluetooth BLE disponible")
                    if api.ble_device:
                        print(f"üéØ ‚úÖ Appareil BLE trouv√©: {api.ble_device.name}")
                    else:
                        print("‚ö†Ô∏è  Appareil BLE non trouv√© (v√©rifiez qu'il est allum√©)")
                else:
                    print("‚ùå Support Bluetooth BLE non disponible (bleak manquant)")
            else:
                print("üì∂ ‚úÖ Mode WiFi/Cloud d√©tect√©")
        else:
            print("‚ùå D√©tection de mode √©chou√©e")
        
        print()
        
        # Test de contr√¥le hybride
        print("üéõÔ∏è TEST CONTR√îLE HYBRIDE")
        print("-" * 30)
        
        test_sequences = [
            {"on": True, "pwm": 100, "desc": "Allumer √† 100%"},
            {"on": True, "pwm": 50, "desc": "R√©duire √† 50%"},
            {"on": True, "pwm": 25, "desc": "R√©duire √† 25%"},
            {"on": True, "pwm": 80, "desc": "Augmenter √† 80%"},
            {"on": False, "pwm": 0, "desc": "√âteindre"}
        ]
        
        for i, test in enumerate(test_sequences, 1):
            print(f"\nüß™ Test {i}: {test['desc']}")
            
            try:
                success = await api.control_device_hybrid(test['on'], test['pwm'])
                
                if success:
                    print(f"   ‚úÖ {test['desc']} - Commande envoy√©e")
                    if api.is_bluetooth_device:
                        print("   üîµ Via Bluetooth BLE direct")
                    else:
                        print("   üì∂ Via API Cloud")
                else:
                    print(f"   ‚ùå {test['desc']} - √âchec")
                    
            except Exception as e:
                print(f"   ‚ùå {test['desc']} - Erreur: {e}")
            
            # Attente entre commandes
            await asyncio.sleep(3)
        
        print("\n" + "=" * 50)
        print("üèÅ TEST TERMIN√â")
        print()
        print("üìã R√âSULTATS POUR HOME ASSISTANT:")
        
        if api.is_bluetooth_device:
            print("üîµ APPAREIL BLUETOOTH:")
            print("   ‚Ä¢ L'int√©gration utilise Bluetooth BLE direct")
            print("   ‚Ä¢ Pas besoin de configuration WiFi")
            print("   ‚Ä¢ Communication locale instantan√©e")
            print("   ‚Ä¢ Fonctionne m√™me sans internet")
        else:
            print("üì∂ APPAREIL WIFI:")
            print("   ‚Ä¢ L'int√©gration utilise l'API cloud")
            print("   ‚Ä¢ N√©cessite connexion internet")
            print("   ‚Ä¢ Appareil doit √™tre connect√© au WiFi")
        
        print()
        print("üîß INSTALLATION DANS HOME ASSISTANT:")
        print("   1. Copier le dossier custom_components/marshydro")
        print("   2. Red√©marrer Home Assistant")
        print("   3. Aller dans Int√©grations ‚Üí Ajouter ‚Üí Mars Hydro")
        print("   4. Entrer email/mot de passe MarsPro")
        print("   5. L'int√©gration d√©tectera automatiquement le mode")
        
    except Exception as e:
        print(f"‚ùå Erreur test: {e}")
        import traceback
        traceback.print_exc()

async def test_light_entity_simulation():
    """Simuler le comportement de l'entit√© light de HA"""
    print("\nüí° SIMULATION ENTIT√â LIGHT HOME ASSISTANT")
    print("=" * 50)
    
    email = "jeremy.noverraz2@proton.me"
    password = "T00rT00r"
    
    try:
        # Simuler l'initialisation comme dans HA
        api = MarsProAPI(email, password)
        await api.login()
        
        # R√©cup√©rer les donn√©es de l'appareil
        device_data = await api.get_lightdata()
        
        if device_data:
            device_name = device_data.get('deviceName', 'Unknown')
            device_id = device_data.get('id')
            brightness_rate = device_data.get('deviceLightRate', 0)
            
            print(f"üì± Appareil: {device_name}")
            print(f"üÜî ID: {device_id}")
            print(f"üí° Luminosit√© actuelle: {brightness_rate}%")
            print()
            
            # Simuler les appels de HA
            print("üè† Simulation appels Home Assistant:")
            print("-" * 40)
            
            # Simulation: Allumer √† 75%
            print("1. Appel: light.turn_on(brightness=192)  # 75%")
            brightness_ha = 192  # HA utilise 0-255
            brightness_percent = round((brightness_ha / 255) * 100)
            is_on = brightness_ha > 0
            
            success = await api.control_device_hybrid(is_on, brightness_percent)
            print(f"   R√©sultat: {'‚úÖ Succ√®s' if success else '‚ùå √âchec'}")
            
            await asyncio.sleep(2)
            
            # Simulation: √âteindre
            print("2. Appel: light.turn_off()")
            success = await api.control_device_hybrid(False, 0)
            print(f"   R√©sultat: {'‚úÖ Succ√®s' if success else '‚ùå √âchec'}")
            
            print()
            print("üí° L'int√©gration HA devrait maintenant fonctionner !")
            
        else:
            print("‚ùå Impossible de r√©cup√©rer les donn√©es de l'appareil")
            
    except Exception as e:
        print(f"‚ùå Erreur simulation: {e}")

if __name__ == "__main__":
    asyncio.run(test_ha_integration())
    asyncio.run(test_light_entity_simulation()) 